/*************************************************
* Jordan Acquah-Asare
* Transaction Class
**************************************************

struct Item
{
	string name;
	int num;
	float price;
};

#ifndef TRANSACTION_H_
#define TRANSACTION_H_

#include <string>
#include <iostream>
#include <iomanip>
#include "date.h"

using namespace std;

class Transaction
{
public:
	Transaction();
	Transaction(string newName, int newNum,
		    float newPrice, int newMember);
	~Transaction();
	string GetItem();
	void SetItem(string newName);
	void SetItem(int newItemNum);
	void SetItem(float newPrice);
	void SetItem(string newName, int newItemNum, float newPrice);
	void PrintItem();
	int GetMemberNum();
	void SetMemberNum(int newMemberNum);
	void PrintMemberNum();
	Transaction GetNext();
	void SetNext(Transaction *newNext);
	Transaction GetPrev();
	void SetNext(Transaction *newPrev);

private:
	int memberNum;
	Item theItem;
	Date theDate;
	Transaction *next;
	Transaction *prev;
};
#endif /* TRANSACTION_H_ */

#include "transaction.h"

	Transaction::Transaction()
	{
		theItem.name = ' ';
		theItem.num = 0;
		theItem.price = 0.0;
		memberNum = 0;
		theDate::Date()
		next = NULL;
		prev = NULL;
	}
	Transaction::Transaction(string newName,int newNum,
				   float newPrice,int newMember)
	{
		theItem.name = newName;
		theItem.num = newNum;
		theItem.price = newPrice;
		memberNum = newMember;
		theDate::Date()
		next = NULL;
		prev = NULL;

	}
	Transaction::~Transaction()
	{
		cout << "Calling Transaction Deconstructor";
	}
	Item Transaction::GetItem()
	{
		return theItem;
	}
	void Transaction::SetItem(string newName)
	{
		theItem.name = newName;
	}
	void Transaction::SetItem(int newNum)
	{
		theItem.num = newNum;
	}
	void Transaction::SetItem(float newPrice)
	{
		theItem.price = newPrice;
	}
	void Transaction::SetItem(string newName,int newNum,
				   float newPrice)
	{
		theItem.name = newName;
		theItem.num = newNum;
		theItem.price = newPrice;
	}
	void Transaction::PrintItem()
	{
		cout << theItem.name << ' ' << theItem.num << ' ' << theItem.price;
	}
	int Transaction::GetMemberNum()
	{
		return memberNum;
	}
	void Transaction::SetMemberNum(int newMemberNum)
	{
		memberNum = newMemberNum;
	}
	void Transaction::PrintMemberNum()
	{
		cout << memberNum;
	}
	Transaction Transaction::GetNext()
	{
		return next;
	}
	void Transaction::SetNext(Transaction *newNext)
	{
		next = newNext;
	}
	Transaction Transaction::GetNext()
	{
		return Prev;
	}
	void Transaction::SetPrev(Transaction *newPrev)
	{
		prev = newPrev;
	}
*************************************************************************************************************

#ifndef TRANSACTION_LIST_H_
#define TRANSACTION_LIST_H_
#include "Transaction.h"

class TransactionList
{
	TransactionList();
	~TransactionList();

	Transaction* FindMemberNode(int searchMemberNum) const;
	Transaction* FindItemNode(string searchName) const;
	Transaction* FindItemNode(int searchItemNum) const;

	void AddNode();
	void DeleteNode(BasicMember* target);

	void OutputList();
	void DeleteList();

private:
	Transaction* head;
};

#endif /* TRANSACTION_LIST_H_ */
************************************************************************************************************
#include "TransactionList.h"

TransactionList::TransactionList()
{
	head = NULL;
}

TransactionList::~TransactionList()
{
	DeleteList();
}

Transaction* TransactionList::FindMemberNode(int searchMemberNum) const
{
	BasicMember* finder;

	finder = head;

	while(finder!= NULL && finder->GetMemberNum != searchMemberNum)
	{
		finder = finder->GetNext();
	}

	return finder;
}

Transaction* TransactionList::FindItemNode(string searchName) const
{
	BasicMember* finder;

	finder = head;

	while(finder!= NULL && finder->GetItem.name != searchName)
	{
		finder = finder->GetNext();
	}

	return finder;
}

Transaction* TransactionList::FindItemNode(int searchItemNum) const
{
	BasicMember* finder;

	finder = head;

	while(finder!= NULL && finder->GetItem.num != searchItemNum)
	{
		finder = finder->GetNext();
	}

	return finder;
}


void TransactionList::AddNode()
{
	Transaction* newNode;

	newNode = new Transaction;

	//FILE INPUT NEEDED

	head = newNode;
	newNode = NULL;

	if(head->GetNext() != NULL)
	{
		head->GetNext()->SetPrev(head);
	}


}

void TransactionList::DeleteNode(Transaction* target)
{
	if(target->GetNext() != NULL)
	{
		target->GetNext()->SetPrev(target->GetPrev());
	}

	if(target->GetPrev() != NULL)
	{
		target->GetPrev()->SetNext(target->GetNext());
	}
	else
	{
		head = target->GetNext();
	}

	delete target;
}

void TransactionList::OutputList()
{
	BasicMember* traverser;

	traverser = head;

	while(traverser != NULL)
	{
		traverser->PrintItem();
		traverser->PrintMemberNum()
		traverser = traverser->GetNext();
	}
}

void TransactionList::DeleteList()
{
	Transaction* deleter;


	while(head!= NULL)
	{
		deleter = head->GetNext();
		delete head;
		head = deleter;
	}

}
